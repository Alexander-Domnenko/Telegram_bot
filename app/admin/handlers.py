from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from app.user.handlers import create_progress_bar

from config import ADMIN_SECRET_CODE
from app.admin.keyboards import create_admin_menu, create_module_selection_kb_dynamic, create_lesson_selection_kb, create_question_selection_kb, create_test_field_selection_kb, create_preview_kb, create_add_question_kb, create_cancel_kb, create_field_selection_kb, create_student_selection_kb, create_stats_filter_kb
from app.admin.states import AdminRegistrationState, UploadLessonState, UpdateState, EditTestStates, AddTestStates, DeleteLessonState, AddModuleState, DeleteModuleState
from app.database.requests import create_user, get_all_modules, get_module_by_code, get_lessons_by_module, get_lesson_by_code, get_test_questions_by_lesson, create_lesson, update_lesson, delete_lesson, create_test_question, update_test_question, delete_test_question, create_module, delete_module, get_all_users, get_user_by_id, get_user_progress, get_user_test_scores, sync_progress_with_content
from sqlalchemy import select
from app.database.models import Lesson
import os
import time
import re
import logging
from statistics import mean

router = Router()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ is_admin
async def is_admin(user_id, db_session):
    user = await get_user_by_id(db_session, user_id)
    return user is not None and user.is_admin
# def is_admin(user_id):
#     return user_id in ADMIN_IDS

def is_valid_text(text):
    return text and 0 < len(text) <= 1000

def is_valid_url(url):
    return bool(re.match(r"^https?://", url))

def is_valid_options(text):
    options = text.split("\n")
    return len(options) >= 2 and all(0 < len(opt.strip()) <= 100 for opt in options)

def is_valid_correct(text, options_count):
    try:
        num = int(text)
        return 1 <= num <= options_count
    except ValueError:
        return False

async def generate_current_question_text(db_session, test_key, question_idx):
    lesson_key = test_key.replace("test", "lesson")
    questions = await get_test_questions_by_lesson(db_session, lesson_key)
    question_data = questions[question_idx]
    options = [question_data.option_1, question_data.option_2]
    if question_data.option_3:
        options.append(question_data.option_3)
    options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
    return f"‚ú¶ –í–æ–ø—Ä–æ—Å {question_idx + 1}:\n{question_data.question_text}\n\n‚ú¶ –í–∞—Ä–∏–∞–Ω—Ç—ã:\n{options_text}\n\n‚ú¶ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data.correct_option}"

async def generate_preview_text(db_session, data, new_value):
    lesson_key = data["test_key"].replace("test", "lesson")
    questions = await get_test_questions_by_lesson(db_session, lesson_key)
    question_data = questions[data["question_idx"]]
    options = [question_data.option_1, question_data.option_2]
    if question_data.option_3:
        options.append(question_data.option_3)
    
    if data["field"] == "question":
        question_text = new_value
    else:
        question_text = question_data.question_text
    
    if data["field"] == "options":
        options = [opt.strip() for opt in new_value.split("\n")]
    elif data["field"] == "correct":
        correct = int(new_value)
    else:
        correct = question_data.correct_option
    
    options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
    return f"‚ú¶ –í–æ–ø—Ä–æ—Å:\n{question_text}\n\n‚ú¶ –í–∞—Ä–∏–∞–Ω—Ç—ã:\n{options_text}\n\n‚ú¶ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"

async def get_next_lesson_key(db_session, module):
    lessons = await get_lessons_by_module(db_session, module)
    if not lessons:
        return f"{module}_lesson-1"
    numbers = [int(lesson.code.split("-")[1]) for lesson in lessons]
    next_number = max(numbers) + 1
    return f"{module}_lesson-{next_number}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –æ–±–Ω–æ–≤–∏–ª
@router.message(Command("admin"))
async def admin_handler(message: Message, state: FSMContext, db_session):
    logging.info(f"Received /admin command from user {message.from_user.id}")
    if not await is_admin(message.from_user.id, db_session):  # –ü–µ—Ä–µ–¥–∞—ë–º db_session
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await state.clear()
    await message.answer(
        "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await create_admin_menu(),
        parse_mode="Markdown"
    )

@router.message(Command("stats"))
async def stats_handler(message: Message, db_session):
    if not await is_admin(message.from_user.id, db_session):
        await message.answer(
            "üö´ **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω**\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
        )
        return
    await show_stats_overview(message, db_session)

@router.callback_query(F.data == "show_stats")
async def stats_callback_handler(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await show_stats_overview(callback.message, db_session)
    await callback.message.delete()
    await callback.answer()

def calculate_average_test_score(test_scores):
    if not test_scores:
        return 0
    scores = [v.score / v.total * 100 for v in test_scores]
    return round(mean(scores), 2)

async def show_stats_overview(message: Message, db_session):
    lessons = (await db_session.execute(select(Lesson))).scalars().all()
    total_lessons = len(lessons)
    students = await get_all_users(db_session)
    total_students = len(students)
    
    if total_students == 0:
        await message.answer(
            "üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤**\n"
            "‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.",
            reply_markup=await create_admin_menu()
        )
        return
    
    total_completed_lessons = 0
    avg_test_scores = []
    for student in students:
        progress = await get_user_progress(db_session, student.id)
        total_completed_lessons += len(progress)
        test_scores = await get_user_test_scores(db_session, student.id)
        avg_test_scores.append(calculate_average_test_score(test_scores))
    
    avg_completion = round(total_completed_lessons / (total_students * total_lessons) * 100, 2)
    avg_test_score = round(mean(avg_test_scores), 2) if avg_test_scores else 0
    
    await message.answer(
        "üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤**\n"
        f"‚ú¶ –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {total_students}\n"
        f"‚ú¶ –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {total_completed_lessons}/{total_students * total_lessons}\n"
        f"‚ú¶ –°—Ä–µ–¥–Ω–∏–π % –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤: {avg_completion}%\n"
        f"‚ú¶ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º: {avg_test_score}%\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await create_stats_filter_kb()
    )

@router.callback_query(F.data == "show_stats_overview")
async def stats_overview_callback(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await show_stats_overview(callback.message, db_session)
    await callback.message.delete()
    await callback.answer()

async def show_filtered_stats(callback: CallbackQuery, db_session, filter_text: str, filtered_students: list):
    lessons = (await db_session.execute(select(Lesson))).scalars().all()
    total_lessons = len(lessons)
    
    if not filtered_students:
        await callback.message.edit_text(
            f"üìä **{filter_text}**\n"
            "‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.",
            reply_markup=await create_stats_filter_kb()
        )
        return
    
    stats_text = f"üìä **{filter_text}**\n‚ú¶ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(filtered_students)}\n\n"
    for user in filtered_students[:10]:
        progress = await get_user_progress(db_session, user.id)
        completed_count = len(progress)
        test_scores = await get_user_test_scores(db_session, user.id)
        avg_test_score = calculate_average_test_score(test_scores)
        student_name = f"{user.first_name} {user.last_name}".strip() or user.username or f"–°—Ç—É–¥–µ–Ω—Ç {user.id}"
        stats_text += (
            f"üë§ {student_name}\n"
            f"–£—Ä–æ–∫–∏: {completed_count}/{total_lessons} ({round(completed_count/total_lessons*100, 2)}%)\n"
            f"–¢–µ—Å—Ç—ã: {avg_test_score}%\n\n"
        )
    
    if len(filtered_students) > 10:
        stats_text += "‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
    
    await callback.message.edit_text(stats_text, reply_markup=await create_stats_filter_kb())

@router.callback_query(F.data == "filter_lessons_less_50")
async def filter_lessons_less_50(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    lessons = (await db_session.execute(select(Lesson))).scalars().all()
    total_lessons = len(lessons)
    threshold = total_lessons * 0.5
    users = await get_all_users(db_session)
    filtered = []
    for user in users:
        progress = await get_user_progress(db_session, user.id)
        if len(progress) < threshold:
            filtered.append(user)
    await show_filtered_stats(callback, db_session, "–°—Ç—É–¥–µ–Ω—Ç—ã —Å –º–µ–Ω–µ–µ 50% —É—Ä–æ–∫–æ–≤", filtered)
    await callback.answer()

@router.callback_query(F.data == "filter_lessons_50_plus")
async def filter_lessons_50_plus(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    lessons = (await db_session.execute(select(Lesson))).scalars().all()
    total_lessons = len(lessons)
    threshold = total_lessons * 0.5
    users = await get_all_users(db_session)
    filtered = []
    for user in users:
        progress = await get_user_progress(db_session, user.id)
        if len(progress) >= threshold:
            filtered.append(user)
    await show_filtered_stats(callback, db_session, "–°—Ç—É–¥–µ–Ω—Ç—ã —Å 50% –∏ –±–æ–ª–µ–µ —É—Ä–æ–∫–æ–≤", filtered)
    await callback.answer()

@router.callback_query(F.data == "filter_lessons_all")
async def filter_lessons_all(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    lessons = (await db_session.execute(select(Lesson))).scalars().all()
    total_lessons = len(lessons)
    users = await get_all_users(db_session)
    filtered = []
    for user in users:
        progress = await get_user_progress(db_session, user.id)
        if len(progress) == total_lessons:
            filtered.append(user)
    await show_filtered_stats(callback, db_session, "–°—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –≤—Å–µ —É—Ä–æ–∫–∏", filtered)
    await callback.answer()

@router.callback_query(F.data == "filter_tests_below_50")
async def filter_tests_below_50(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    users = await get_all_users(db_session)
    filtered = []
    for user in users:
        test_scores = await get_user_test_scores(db_session, user.id)
        if calculate_average_test_score(test_scores) < 50:
            filtered.append(user)
    await show_filtered_stats(callback, db_session, "–°—Ç—É–¥–µ–Ω—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏ –Ω–∏–∂–µ 50%", filtered)
    await callback.answer()

@router.callback_query(F.data == "filter_tests_above_80")
async def filter_tests_above_80(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    users = await get_all_users(db_session)
    filtered = []
    for user in users:
        test_scores = await get_user_test_scores(db_session, user.id)
        if calculate_average_test_score(test_scores) > 80:
            filtered.append(user)
    await show_filtered_stats(callback, db_session, "–°—Ç—É–¥–µ–Ω—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏ –≤—ã—à–µ 80%", filtered)
    await callback.answer()

@router.callback_query(F.data == "sort_by_lessons")
async def sort_by_lessons(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    users = await get_all_users(db_session)
    sorted_students = sorted(
        users,
        key=lambda user: len(user.progress),
        reverse=True
    )
    await show_filtered_stats(callback, db_session, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Ä–æ–∫–æ–≤", sorted_students)
    await callback.answer()

@router.callback_query(F.data == "sort_by_tests")
async def sort_by_tests(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    users = await get_all_users(db_session)
    sorted_students = sorted(
        users,
        key=lambda user: calculate_average_test_score(user.test_scores),
        reverse=True
    )
    await show_filtered_stats(callback, db_session, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É —Ç–µ—Å—Ç–æ–≤", sorted_students)
    await callback.answer()

@router.callback_query(F.data.startswith("student_"))
async def show_student_stats(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    user_id = int(callback.data.split("_")[1])
    user = await get_user_by_id(db_session, user_id)
    if not user:
        await callback.message.edit_text(
            "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=await create_admin_menu()
        )
        await callback.answer()
        return
    
    lessons = (await db_session.execute(select(Lesson))).scalars().all()
    total_lessons = len(lessons)
    progress = await get_user_progress(db_session, user_id)
    completed_lessons = {p.lesson_code for p in progress}
    test_scores = await get_user_test_scores(db_session, user_id)
    
    student_name = f"{user.first_name} {user.last_name}".strip() or user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç"
    completed_text = "\n".join([f"‚úîÔ∏è {lesson}" for lesson in completed_lessons]) or "‚Äî –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤"
    incomplete_lessons = [lesson.code for lesson in lessons if lesson.code not in completed_lessons]
    incomplete_text = "\n".join([f"‚ùå {lesson}" for lesson in incomplete_lessons]) or "‚Äî –í—Å–µ —É—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
    score_text = "\n".join([f"‚û§ {k.test_code}: {k.score}/{k.total} ({round(k.score/k.total*100, 2)}%)" for k in test_scores]) or "‚Äî –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
    avg_test_score = calculate_average_test_score(test_scores)
    
    completed_count = len(completed_lessons)
    progress_bar = create_progress_bar(completed_count, total_lessons)
    
    await callback.message.edit_text(
        f"üìã **–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞**\n"
        f"–ò–º—è: {student_name}\n"
        f"ID: `{user_id}`\n\n"
        "‚ú¶ **–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è**\n"
        f"–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {completed_count}/{total_lessons}\n"
        f"{progress_bar}\n\n"
        "‚ú¶ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏**\n"
        f"{completed_text}\n\n"
        "‚ú¶ **–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏**\n"
        f"{incomplete_text}\n\n"
        "‚ú¶ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤**\n"
        f"{score_text}\n"
        f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_test_score}%",
        reply_markup=await create_stats_filter_kb()
    )
    await callback.answer()

def create_progress_bar(current, total):
    bar_length = 10
    filled = int(bar_length * current / total) if total > 0 else 0
    empty = bar_length - filled
    return f"[{('üü©' * filled) + ('‚¨ú' * empty)}] {current}/{total}"

@router.callback_query(F.data == "cancel", StateFilter(None, UploadLessonState, UpdateState, EditTestStates, AddTestStates, DeleteLessonState, AddModuleState, DeleteModuleState))
async def cancel_handler(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "‚úÖ **–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n"
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=await create_admin_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "finish", StateFilter(UploadLessonState, UpdateState, EditTestStates, AddTestStates))
async def finish_handler(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "‚úÖ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n"
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=await create_admin_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "exit_admin", StateFilter(None, UploadLessonState, UpdateState, EditTestStates, AddTestStates, DeleteLessonState, AddModuleState, DeleteModuleState))
async def exit_admin_handler(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.clear()
    await callback.message.delete()
    await callback.message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await callback.answer()

@router.callback_query(F.data == "admin_help")
async def admin_help_handler(callback: CallbackQuery, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    help_text = (
        "‚ÑπÔ∏è **–ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –≤—Å—ë –ø–æ—à–∞–≥–æ–≤–æ!**\n\n"
        "–¢—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∏ –∫–∞–∫:\n\n"
        
        "‚ú¶ **–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫**\n"
        "1. –ñ–º–∏ '–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫'.\n"
        "2. –í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'first').\n"
        "3. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≠—Ç–æ —É—Ä–æ–∫ –ø—Ä–æ –æ—Å–Ω–æ–≤—ã').\n"
        "4. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ —Ñ–æ—Ç–∫–∏ –Ω–µ—Ç.\n"
        "5. –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'https://youtube.com/...').\n"
        "6. –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'https://docs.google.com/...').\n"
        "7. –ì–æ—Ç–æ–≤–æ ‚Äî —É—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        
        "‚ú¶ **–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫**\n"
        "1. –ñ–º–∏ '–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫–∏'.\n"
        "2. –í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'second').\n"
        "3. –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'second_lesson-1').\n"
        "4. –í—ã–±–µ—Ä–∏, —á—Ç–æ –º–µ–Ω—è—Ç—å: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç.\n"
        "5. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É).\n"
        "6. –ñ–º–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å.\n\n"
        
        "‚ú¶ **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç**\n"
        "1. –ñ–º–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç'.\n"
        "2. –í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'third').\n"
        "3. –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'third_lesson-2').\n"
        "4. –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ß—Ç–æ —Ç–∞–∫–æ–µ –±–æ—Ç?').\n"
        "5. –ù–∞–ø–∏—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "   - –†–æ–±–æ—Ç\n"
        "   - –ß–µ–ª–æ–≤–µ–∫\n"
        "   - –ü—Ä–æ–≥—Ä–∞–º–º–∞).\n"
        "6. –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '3').\n"
        "7. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'.\n"
        "8. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.\n"
        "9. –î–æ–±–∞–≤—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∂–º–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.\n\n"
        
        "‚ú¶ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã**\n"
        "1. –ñ–º–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã'.\n"
        "2. –í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'first').\n"
        "3. –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'first_lesson-1').\n"
        "4. –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–π.\n"
        "5. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: –≤—ã–±–µ—Ä–∏, —á—Ç–æ –º–µ–Ω—è—Ç—å (–≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã, –æ—Ç–≤–µ—Ç, —Ñ–æ—Ç–æ).\n"
        "6. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
        "7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
        "8. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è: –≤—ã–±–µ—Ä–∏ '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å' –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏.\n"
        "9. –ñ–º–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å.\n\n"
        
        "‚ú¶ **–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫**\n"
        "1. –ñ–º–∏ '–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫'.\n"
        "2. –í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'second').\n"
        "3. –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'second_lesson-3').\n"
        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏.\n"
        "5. –£—Ä–æ–∫ –∏ –µ–≥–æ —Ç–µ—Å—Ç —É–¥–∞–ª—è—Ç—Å—è.\n\n"
        
        "‚ú¶ **–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å**\n"
        "1. –ñ–º–∏ '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'.\n"
        "2. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'fourth', —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "3. –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ–¥—É–ª—å –ø—Ä–æ Python').\n"
        "4. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–∫—É.\n"
        "5. –ù–æ–≤—ã–π –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤!\n\n"
        
        "‚ú¶ **–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å**\n"
        "1. –ñ–º–∏ '–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å'.\n"
        "2. –í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'third').\n"
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏.\n"
        "4. –ú–æ–¥—É–ª—å –∏ –≤—Å–µ –µ–≥–æ —É—Ä–æ–∫–∏ —Å —Ç–µ—Å—Ç–∞–º–∏ —É–¥–∞–ª—è—Ç—Å—è.\n\n"
        
        "‚ú¶ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n"
        "1. –ñ–º–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'.\n"
        "2. –°–º–æ—Ç—Ä–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n"
        "3. –í—ã–±–µ—Ä–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤.\n\n"
        
        "‚ú¶ **–í—ã–π—Ç–∏**\n"
        "1. –ñ–º–∏ '–í—ã–π—Ç–∏'.\n"
        "2. –¢—ã –≤–µ—Ä–Ω—ë—à—å—Å—è –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é.\n\n"
        
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–∏—à–∏ @SupportBot. –£–¥–∞—á–∏, –∞–¥–º–∏–Ω! üöÄ"
    )
    await callback.message.edit_text(
        help_text,
        reply_markup=await create_admin_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /upload_lesson
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫"
@router.callback_query(F.data == "upload_lesson")
async def upload_lesson_callback(callback: CallbackQuery, state: FSMContext, db_session):
    logging.info(f"Received callback for 'upload_lesson' button from user {callback.from_user.id}")
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    modules = await get_all_modules(db_session)
    if not modules:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'.",
            reply_markup=await create_admin_menu()
        )
        return
    await state.set_state(UploadLessonState.module)
    await callback.message.delete()
    await callback.message.answer(
        "üìö **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=await create_module_selection_kb_dynamic(db_session)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è
@router.callback_query(UploadLessonState.module, F.data.not_in(["cancel", "exit_admin"]))
async def upload_lesson_module(callback: CallbackQuery, state: FSMContext, db_session):
    logging.info(f"Received callback for UploadLessonState.module: {callback.data}")
    module = callback.data
    module_obj = await get_module_by_code(db_session, module)
    if not module_obj:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    key = await get_next_lesson_key(db_session, module)
    await state.update_data(key=key, module_id=module_obj.id)
    await state.set_state(UploadLessonState.text)
    await callback.message.delete()
    await callback.message.answer(
        f"üìù **–ù–æ–≤—ã–π —É—Ä–æ–∫: {key}**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=await create_cancel_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–∫–∞
@router.message(UploadLessonState.text, F.text)
async def upload_lesson_text(message: Message, state: FSMContext):
    logging.info(f"Received text in UploadLessonState.text: {message.text}")
    text = message.text
    if not is_valid_text(text):
        await message.answer(
            "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(text=text)
    await state.set_state(UploadLessonState.photo)
    await message.answer(
        "üñº **–§–æ—Ç–æ —É—Ä–æ–∫–∞**\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):",
        reply_markup=await create_cancel_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —É—Ä–æ–∫–∞
@router.message(UploadLessonState.photo, F.photo)
async def upload_lesson_photo(message: Message, state: FSMContext):
    logging.info("Received photo in UploadLessonState.photo")
    try:
        photo_file = await message.bot.download(message.photo[-1])
        photo_path = f"./img/lesson_{int(time.time())}.jpg"
        os.makedirs(os.path.dirname(photo_path), exist_ok=True)
        with open(photo_path, "wb") as f:
            f.write(photo_file.getvalue())
        await state.update_data(photo=photo_path)
        await state.set_state(UploadLessonState.video_url)
        await message.answer(
            "üé• **–í–∏–¥–µ–æ—É—Ä–æ–∫**\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://youtube.com/...):",
            reply_markup=await create_cancel_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ "–Ω–µ—Ç" –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ
@router.message(UploadLessonState.photo, F.text.lower() == "–Ω–µ—Ç")
async def upload_lesson_no_photo(message: Message, state: FSMContext):
    logging.info("Received '–Ω–µ—Ç' in UploadLessonState.photo")
    await state.update_data(photo="./img/57fa8b50d6ab7b9f49e84f790d5b4d82.jpg")
    await state.set_state(UploadLessonState.video_url)
    await message.answer(
        "üé• **–í–∏–¥–µ–æ—É—Ä–æ–∫**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://youtube.com/...):",
        reply_markup=await create_cancel_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ photo
@router.message(UploadLessonState.photo)
async def upload_lesson_photo_invalid(message: Message, state: FSMContext):
    logging.warning(f"Invalid message in UploadLessonState.photo: {message.content_type}")
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç '–Ω–µ—Ç'.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=await create_cancel_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
@router.message(UploadLessonState.video_url, F.text)
async def upload_lesson_video_url(message: Message, state: FSMContext):
    logging.info(f"Received video URL in UploadLessonState.video_url: {message.text}")
    url = message.text
    if not is_valid_url(url):
        await message.answer(
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(video_url=url)
    await state.set_state(UploadLessonState.notes_url)
    await message.answer(
        "üìñ **–ö–æ–Ω—Å–ø–µ–∫—Ç**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://docs.google.com/...):",
        reply_markup=await create_cancel_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ video_url
@router.message(UploadLessonState.video_url)
async def upload_lesson_video_url_invalid(message: Message, state: FSMContext):
    logging.warning(f"Invalid message in UploadLessonState.video_url: {message.content_type}")
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://youtube.com/...).\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=await create_cancel_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç
@router.message(UploadLessonState.notes_url, F.text)
async def upload_lesson_notes_url(message: Message, state: FSMContext, db_session):
    logging.info(f"Received notes URL in UploadLessonState.notes_url: {message.text}")
    url = message.text
    if not is_valid_url(url):
        await message.answer(
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    try:
        data = await state.get_data()
        await create_lesson(
            db_session, data["key"], data["module_id"], data["text"],
            data["photo"], data["video_url"], url
        )
        await state.clear()
        await message.answer(
            f"‚úÖ **–£—Ä–æ–∫ {data['key']} –¥–æ–±–∞–≤–ª–µ–Ω!**\n"
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=await create_admin_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ notes_url
@router.message(UploadLessonState.notes_url)
async def upload_lesson_notes_url_invalid(message: Message, state: FSMContext):
    logging.warning(f"Invalid message in UploadLessonState.notes_url: {message.content_type}")
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://docs.google.com/...).\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=await create_cancel_kb()
    )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /update
@router.message(Command("update"))
async def update_start(message: Message, state: FSMContext, db_session):
    if not await is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    modules = await get_all_modules(db_session)
    if not modules:
        await message.answer(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'.",
            reply_markup=await create_admin_menu()
        )
        return
    await state.set_state(UpdateState.module)
    await message.answer(
        "üõ† **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=await create_module_selection_kb_dynamic(db_session)
    )

# –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫–∏" –≤ –º–µ–Ω—é
@router.callback_query(F.data == "update_content")
async def update_content_callback(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    modules = await get_all_modules(db_session)
    if not modules:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'.",
            reply_markup=await create_admin_menu()
        )
        return
    await state.set_state(UpdateState.module)
    await callback.message.delete()
    await callback.message.answer(
        "üõ† **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=await create_module_selection_kb_dynamic(db_session)
    )
    await callback.answer()

@router.callback_query(UpdateState.module, F.data.not_in(["cancel", "exit_admin"]))
async def update_module(callback: CallbackQuery, state: FSMContext, db_session):
    module = callback.data
    module_obj = await get_module_by_code(db_session, module)
    if not module_obj:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    lessons = await get_lessons_by_module(db_session, module)
    if not lessons:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—Ä–æ–∫.",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
        return
    await state.update_data(module=module)
    await state.set_state(UpdateState.key)
    await callback.message.delete()
    await callback.message.answer(
        f"üìö **–ú–æ–¥—É–ª—å: {module}**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=await create_lesson_selection_kb(db_session, module)
    )
    await callback.answer()

@router.callback_query(UpdateState.key, F.data.regexp(r"^.+\_lesson-\d+$"))
async def update_key(callback: CallbackQuery, state: FSMContext, db_session):
    key = callback.data
    lesson = await get_lesson_by_code(db_session, key)
    if not lesson:
        await callback.message.edit_text(
            "‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
    else:
        await state.update_data(key=key)
        await state.set_state(UpdateState.field)
        await callback.message.delete()
        await callback.message.answer(
            f"üìù **–£—Ä–æ–∫: {key}**\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?",
            reply_markup=await create_field_selection_kb()
        )
    await callback.answer()

@router.callback_query(UpdateState.field, F.data.in_(["text", "photo", "video", "notes"]))
async def update_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data
    await state.update_data(field=field)
    await state.set_state(UpdateState.value)
    if field == "photo":
        await callback.message.delete()
        await callback.message.answer(
            "üñº **–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ**\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):",
            reply_markup=await create_cancel_kb()
        )
    else:
        field_names = {"text": "–¢–µ–∫—Å—Ç", "video": "–í–∏–¥–µ–æ", "notes": "–ö–æ–Ω—Å–ø–µ–∫—Ç"}
        await callback.message.delete()
        await callback.message.answer(
            f"‚ú¶ **{field_names[field]}**\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=await create_cancel_kb()
        )
    await callback.answer()

@router.message(UpdateState.value, F.photo)
async def update_photo_value(message: Message, state: FSMContext, db_session):
    data = await state.get_data()
    if data["field"] != "photo":
        await message.answer(
            "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    try:
        photo_file = await message.bot.download(message.photo[-1])
        photo_path = f"./img/update_{int(time.time())}.jpg"
        os.makedirs(os.path.dirname(photo_path), exist_ok=True)
        with open(photo_path, "wb") as f:
            f.write(photo_file.getvalue())
        lesson = await get_lesson_by_code(db_session, data["key"])
        await update_lesson(db_session, lesson, "photo", photo_path)
        await state.set_state(UpdateState.field)
        await message.answer(
            f"‚úÖ **–§–æ—Ç–æ –¥–ª—è {data['key']} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n"
            "–ß—Ç–æ –µ—â—ë –æ–±–Ω–æ–≤–∏—Ç—å?",
            reply_markup=await create_field_selection_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )

@router.message(UpdateState.value, F.text.lower() == "–Ω–µ—Ç")
async def update_no_photo_value(message: Message, state: FSMContext, db_session):
    data = await state.get_data()
    if data["field"] != "photo":
        await message.answer(
            "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–Ω–µ—Ç", –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
    await state.set_state(UpdateState.field)
    await message.answer(
        f"‚úÖ **–§–æ—Ç–æ –¥–ª—è {data['key']} –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!**\n"
        "–ß—Ç–æ –µ—â—ë –æ–±–Ω–æ–≤–∏—Ç—å?",
        reply_markup=await create_field_selection_kb()
    )

@router.message(UpdateState.value)
async def update_value(message: Message, state: FSMContext, db_session):
    data = await state.get_data()
    field = data["field"]
    value = message.text
    
    if field in ["video", "notes"] and not is_valid_url(value):
        await message.answer(
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    
    if field == "text" and not is_valid_text(value):
        await message.answer(
            "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    
    try:
        lesson = await get_lesson_by_code(db_session, data["key"])
        await update_lesson(db_session, lesson, field, value)
        await state.set_state(UpdateState.field)
        await message.answer(
            f"‚úÖ **{field.capitalize()} –¥–ª—è {data['key']} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n"
            "–ß—Ç–æ –µ—â—ë –æ–±–Ω–æ–≤–∏—Ç—å?",
            reply_markup=await create_field_selection_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()

@router.callback_query(F.data == "delete_lesson")
async def delete_lesson_start(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    modules = await get_all_modules(db_session)
    if not modules:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'.",
            reply_markup=await create_admin_menu()
        )
        return
    await state.set_state(DeleteLessonState.module)
    await callback.message.delete()
    await callback.message.answer(
        "üóë **–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=await create_module_selection_kb_dynamic(db_session)
    )
    await callback.answer()

@router.callback_query(DeleteLessonState.module, F.data.not_in(["cancel", "exit_admin"]))
async def delete_lesson_module(callback: CallbackQuery, state: FSMContext, db_session):
    module = callback.data
    module_obj = await get_module_by_code(db_session, module)
    if not module_obj:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    lessons = await get_lessons_by_module(db_session, module)
    if not lessons:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—Ä–æ–∫.",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
        return
    await state.update_data(module=module)
    await state.set_state(DeleteLessonState.lesson)
    await callback.message.delete()
    await callback.message.answer(
        f"üìö **–ú–æ–¥—É–ª—å: {module}**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=await create_lesson_selection_kb(db_session, module)
    )
    await callback.answer()

@router.callback_query(DeleteLessonState.lesson, F.data.regexp(r"^.+\_lesson-\d+$"))
async def delete_lesson_select(callback: CallbackQuery, state: FSMContext, db_session):
    key = callback.data
    lesson = await get_lesson_by_code(db_session, key)
    if not lesson:
        await callback.message.edit_text(
            "‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    await state.update_data(key=key)
    await state.set_state(DeleteLessonState.confirm)
    await callback.message.delete()
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(2)
    await callback.message.answer(
        f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ {key}?\n"
        "–≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(DeleteLessonState.confirm, F.data == "confirm_delete")
async def delete_lesson_confirm(callback: CallbackQuery, state: FSMContext, db_session):
    data = await state.get_data()
    key = data["key"]
    try:
        await delete_lesson(db_session, key)
        await sync_progress_with_content(db_session)
        await state.clear()
        await callback.message.delete()
        await callback.message.answer(
            f"‚úÖ **–£—Ä–æ–∫ {key} —É–¥–∞–ª—ë–Ω!**\n"
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=await create_admin_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
    await callback.answer()

@router.callback_query(F.data == "add_test")
async def add_test_start(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    modules = await get_all_modules(db_session)
    if not modules:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'.",
            reply_markup=await create_admin_menu()
        )
        return
    await state.set_state(AddTestStates.module)
    await callback.message.delete()
    await callback.message.answer(
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=await create_module_selection_kb_dynamic(db_session)
    )
    await callback.answer()

@router.callback_query(AddTestStates.module, F.data.not_in(["cancel", "exit_admin"]))
async def add_test_module(callback: CallbackQuery, state: FSMContext, db_session):
    module = callback.data
    module_obj = await get_module_by_code(db_session, module)
    if not module_obj:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    lessons = await get_lessons_by_module(db_session, module)
    if not lessons:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—Ä–æ–∫.",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
        return
    await state.update_data(module=module)
    await state.set_state(AddTestStates.lesson)
    await callback.message.delete()
    await callback.message.answer(
        f"üìö **–ú–æ–¥—É–ª—å: {module}**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞:",
        reply_markup=await create_lesson_selection_kb(db_session, module)
    )
    await callback.answer()

@router.callback_query(AddTestStates.lesson, F.data.regexp(r"^.+\_lesson-\d+$"))
async def add_test_lesson(callback: CallbackQuery, state: FSMContext, db_session):
    lesson_key = callback.data
    lesson = await get_lesson_by_code(db_session, lesson_key)
    if not lesson:
        await callback.message.edit_text(
            "‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    test_key = lesson_key.replace("lesson", "test")
    await state.update_data(test_key=test_key)
    await state.set_state(AddTestStates.question)
    await callback.message.delete()
    await callback.message.answer(
        f"üìù **–¢–µ—Å—Ç –¥–ª—è {lesson_key}**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=await create_cancel_kb()
    )
    await callback.answer()

@router.message(AddTestStates.question)
async def add_test_question(message: Message, state: FSMContext):
    question_text = message.text
    if not is_valid_text(question_text):
        await message.answer(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(question_text=question_text)
    await state.set_state(AddTestStates.options)
    await message.answer(
        "üìã **–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞**\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –º–∏–Ω–∏–º—É–º 2, –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥—ã–π):\n"
        "–ü—Ä–∏–º–µ—Ä:\n- –í–∞—Ä–∏–∞–Ω—Ç 1\n- –í–∞—Ä–∏–∞–Ω—Ç 2\n- –í–∞—Ä–∏–∞–Ω—Ç 3",
        reply_markup=await create_cancel_kb()
    )

@router.message(AddTestStates.options)
async def add_test_options(message: Message, state: FSMContext):
    options_text = message.text
    if not is_valid_options(options_text):
        await message.answer(
            "‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–∞–∂–¥—ã–π –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(options=options_text)
    await state.set_state(AddTestStates.correct)
    await message.answer(
        "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1):",
        reply_markup=await create_cancel_kb()
    )

@router.message(AddTestStates.correct)
async def add_test_correct(message: Message, state: FSMContext):
    data = await state.get_data()
    options = data["options"].split("\n")
    correct = message.text
    if not is_valid_correct(correct, len(options)):
        await message.answer(
            f"‚ö†Ô∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(options)}.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(correct=correct)
    await state.set_state(AddTestStates.photo)
    await message.answer(
        "üñº **–§–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞**\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):",
        reply_markup=await create_cancel_kb()
    )

@router.message(AddTestStates.photo, F.photo)
async def add_test_photo(message: Message, state: FSMContext, db_session):
    try:
        photo_file = await message.bot.download(message.photo[-1])
        photo_path = f"./img/test_{int(time.time())}.jpg"
        os.makedirs(os.path.dirname(photo_path), exist_ok=True)
        with open(photo_path, "wb") as f:
            f.write(photo_file.getvalue())
        await state.update_data(photo=photo_path)
        await state.set_state(AddTestStates.preview)
        data = await state.get_data()
        preview_text = await generate_preview_text(message.db_session, data, None)
        await message.answer(
            f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞**\n\n{preview_text}",
            reply_markup=await create_preview_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )

@router.message(AddTestStates.photo, F.text.lower() == "–Ω–µ—Ç")
async def add_test_no_photo(message: Message, state: FSMContext):
    await state.update_data(photo="./img/57fa8b50d6ab7b9f49e84f790d5b4d82.jpg")
    await state.set_state(AddTestStates.preview)
    data = await state.get_data()
    preview_text = await generate_preview_text(message.db_session, data, None)
    await message.answer(
        f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞**\n\n{preview_text}",
        reply_markup=await create_preview_kb()
    )

@router.message(AddTestStates.photo)
async def add_test_photo_invalid(message: Message, state: FSMContext):
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç '–Ω–µ—Ç'.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=await create_cancel_kb()
    )

@router.callback_query(AddTestStates.preview, F.data == "confirm")
async def add_test_confirm(callback: CallbackQuery, state: FSMContext, db_session):
    data = await state.get_data()
    options = [opt.strip() for opt in data["options"].split("\n")]
    try:
        await create_test_question(
            db_session, data["test_key"].replace("test", "lesson"),
            data["question_text"], options, int(data["correct"]), data["photo"]
        )
        await state.set_state(AddTestStates.question)
        await callback.message.delete()
        await callback.message.answer(
            "‚úÖ **–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!**\n"
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=await create_add_question_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
    await callback.answer()

@router.callback_query(AddTestStates.preview, F.data == "cancel_preview")
async def add_test_cancel_preview(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddTestStates.question)
    await callback.message.delete()
    await callback.message.answer(
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=await create_cancel_kb()
    )
    await callback.answer()

@router.callback_query(AddTestStates.question, F.data == "add_another_question")
async def add_another_question(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=await create_cancel_kb()
    )
    await callback.answer()

@router.callback_query(F.data == "edit_tests")
async def edit_tests_start(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    modules = await get_all_modules(db_session)
    if not modules:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'.",
            reply_markup=await create_admin_menu()
        )
        return
    await state.set_state(EditTestStates.module)
    await callback.message.delete()
    await callback.message.answer(
        "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=await create_module_selection_kb_dynamic(db_session)
    )
    await callback.answer()

@router.callback_query(EditTestStates.module, F.data.not_in(["cancel", "exit_admin"]))
async def edit_tests_module(callback: CallbackQuery, state: FSMContext, db_session):
    module = callback.data
    module_obj = await get_module_by_code(db_session, module)
    if not module_obj:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    lessons = await get_lessons_by_module(db_session, module)
    if not lessons:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—Ä–æ–∫.",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
        return
    await state.update_data(module=module)
    await state.set_state(EditTestStates.lesson)
    await callback.message.delete()
    await callback.message.answer(
        f"üìö **–ú–æ–¥—É–ª—å: {module}**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
        reply_markup=await create_lesson_selection_kb(db_session, module)
    )
    await callback.answer()

@router.callback_query(EditTestStates.lesson, F.data.regexp(r"^.+\_lesson-\d+$"))
async def edit_tests_lesson(callback: CallbackQuery, state: FSMContext, db_session):
    lesson_key = callback.data
    lesson = await get_lesson_by_code(db_session, lesson_key)
    if not lesson:
        await callback.message.edit_text(
            "‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    test_key = lesson_key.replace("lesson", "test")
    questions = await get_test_questions_by_lesson(db_session, lesson_key)
    if not questions:
        await state.update_data(test_key=test_key, question_idx=0)
        await state.set_state(EditTestStates.add_question)
        await callback.message.delete()
        await callback.message.answer(
            f"üìù **–¢–µ—Å—Ç –¥–ª—è {lesson_key}**\n"
            "–¢–µ—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–æ–ø—Ä–æ—Å.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=await create_cancel_kb()
        )
    else:
        await state.update_data(test_key=test_key, question_idx=0)
        await state.set_state(EditTestStates.question)
        question_text = await generate_current_question_text(db_session, test_key, 0)
        await callback.message.delete()
        await callback.message.answer(
            f"üìù **–¢–µ—Å—Ç –¥–ª—è {lesson_key}**\n\n{question_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await create_question_selection_kb(db_session, test_key)
        )
    await callback.answer()

@router.callback_query(EditTestStates.question, F.data.startswith("question_"))
async def edit_tests_select_question(callback: CallbackQuery, state: FSMContext, db_session):
    question_idx = int(callback.data.split("_")[1])
    data = await state.get_data()
    questions = await get_test_questions_by_lesson(db_session, data["test_key"].replace("test", "lesson"))
    if question_idx >= len(questions):
        await callback.message.edit_text(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
        return
    await state.update_data(question_idx=question_idx)
    question_text = await generate_current_question_text(db_session, data["test_key"], question_idx)
    await callback.message.delete()
    await callback.message.answer(
        f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞**\n\n{question_text}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=await create_test_field_selection_kb()
    )
    await callback.answer()

@router.callback_query(EditTestStates.question, F.data == "add_new_question")
async def edit_tests_add_new_question(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditTestStates.add_question)
    await callback.message.delete()
    await callback.message.answer(
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=await create_cancel_kb()
    )
    await callback.answer()

@router.message(EditTestStates.add_question)
async def edit_tests_add_question_text(message: Message, state: FSMContext):
    question_text = message.text
    if not is_valid_text(question_text):
        await message.answer(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(new_question_text=question_text)
    await state.set_state(EditTestStates.add_question_options)
    await message.answer(
        "üìã **–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞**\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –º–∏–Ω–∏–º—É–º 2, –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥—ã–π):\n"
        "–ü—Ä–∏–º–µ—Ä:\n- –í–∞—Ä–∏–∞–Ω—Ç 1\n- –í–∞—Ä–∏–∞–Ω—Ç 2\n- –í–∞—Ä–∏–∞–Ω—Ç 3",
        reply_markup=await create_cancel_kb()
    )

@router.message(EditTestStates.add_question_options)
async def edit_tests_add_question_options(message: Message, state: FSMContext):
    options_text = message.text
    if not is_valid_options(options_text):
        await message.answer(
            "‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–∞–∂–¥—ã–π –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(new_options=options_text)
    await state.set_state(EditTestStates.add_question_correct)
    await message.answer(
        "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1):",
        reply_markup=await create_cancel_kb()
    )

@router.message(EditTestStates.add_question_correct)
async def edit_tests_add_question_correct(message: Message, state: FSMContext):
    data = await state.get_data()
    options = data["new_options"].split("\n")
    correct = message.text
    if not is_valid_correct(correct, len(options)):
        await message.answer(
            f"‚ö†Ô∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(options)}.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(new_correct=correct)
    await state.set_state(EditTestStates.add_question_photo)
    await message.answer(
        "üñº **–§–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞**\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):",
        reply_markup=await create_cancel_kb()
    )

@router.message(EditTestStates.add_question_photo, F.photo)
async def edit_tests_add_question_photo(message: Message, state: FSMContext):
    try:
        photo_file = await message.bot.download(message.photo[-1])
        photo_path = f"./img/test_{int(time.time())}.jpg"
        os.makedirs(os.path.dirname(photo_path), exist_ok=True)
        with open(photo_path, "wb") as f:
            f.write(photo_file.getvalue())
        await state.update_data(new_photo=photo_path)
        await state.set_state(EditTestStates.add_question_preview)
        data = await state.get_data()
        preview_text = await generate_preview_text(message.db_session, data, None)
        await message.answer(
            f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞**\n\n{preview_text}",
            reply_markup=await create_preview_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )

@router.message(EditTestStates.add_question_photo, F.text.lower() == "–Ω–µ—Ç")
async def edit_tests_add_question_no_photo(message: Message, state: FSMContext):
    await state.update_data(new_photo="./img/57fa8b50d6ab7b9f49e84f790d5b4d82.jpg")
    await state.set_state(EditTestStates.add_question_preview)
    data = await state.get_data()
    preview_text = await generate_preview_text(message.db_session, data, None)
    await message.answer(
        f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞**\n\n{preview_text}",
        reply_markup=await create_preview_kb()
    )

@router.message(EditTestStates.add_question_photo)
async def edit_tests_add_question_photo_invalid(message: Message, state: FSMContext):
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç '–Ω–µ—Ç'.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=await create_cancel_kb()
    )

@router.callback_query(EditTestStates.add_question_preview, F.data == "confirm")
async def edit_tests_add_question_confirm(callback: CallbackQuery, state: FSMContext, db_session):
    data = await state.get_data()
    options = [opt.strip() for opt in data["new_options"].split("\n")]
    try:
        await create_test_question(
            db_session, data["test_key"].replace("test", "lesson"),
            data["new_question_text"], options, int(data["new_correct"]), data["new_photo"]
        )
        await state.set_state(EditTestStates.question)
        await state.update_data(question_idx=0)
        question_text = await generate_current_question_text(db_session, data["test_key"], 0)
        await callback.message.delete()
        await callback.message.answer(
            f"‚úÖ **–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n{question_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await create_question_selection_kb(db_session, data["test_key"])
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
    await callback.answer()

@router.callback_query(EditTestStates.add_question_preview, F.data == "cancel_preview")
async def edit_tests_add_question_cancel_preview(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditTestStates.add_question)
    await callback.message.delete()
    await callback.message.answer(
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=await create_cancel_kb()
    )
    await callback.answer()

@router.callback_query(EditTestStates.question, F.data.in_(["question", "options", "correct", "photo", "delete_question"]))
async def edit_tests_select_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data
    await state.update_data(field=field)
    if field == "delete_question":
        await state.set_state(EditTestStates.delete_confirm)
        await callback.message.delete()
        await callback.message.answer(
            "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?",
            reply_markup=await create_preview_kb()
        )
    else:
        await state.set_state(EditTestStates.field)
        if field == "photo":
            await callback.message.delete()
            await callback.message.answer(
                "üñº **–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ**\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):",
                reply_markup=await create_cancel_kb()
            )
        else:
            field_names = {"question": "–í–æ–ø—Ä–æ—Å", "options": "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞", "correct": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"}
            await callback.message.delete()
            await callback.message.answer(
                f"‚ú¶ **{field_names[field]}**\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                reply_markup=await create_cancel_kb()
            )
    await callback.answer()

@router.callback_query(EditTestStates.delete_confirm, F.data == "confirm")
async def edit_tests_delete_confirm(callback: CallbackQuery, state: FSMContext, db_session):
    data = await state.get_data()
    lesson_key = data["test_key"].replace("test", "lesson")
    questions = await get_test_questions_by_lesson(db_session, lesson_key)
    if data["question_idx"] >= len(questions):
        await callback.message.edit_text(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
        return
    question = questions[data["question_idx"]]
    try:
        await delete_test_question(db_session, question.id)
        questions = await get_test_questions_by_lesson(db_session, lesson_key)
        if not questions:
            await state.clear()
            await callback.message.delete()
            await callback.message.answer(
                "‚úÖ **–¢–µ—Å—Ç —É–¥–∞–ª—ë–Ω!**\n"
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=await create_admin_menu()
            )
        else:
            await state.update_data(question_idx=0)
            await state.set_state(EditTestStates.question)
            question_text = await generate_current_question_text(db_session, data["test_key"], 0)
            await callback.message.delete()
            await callback.message.answer(
                f"‚úÖ **–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω!**\n\n{question_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await create_question_selection_kb(db_session, data["test_key"])
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
    await callback.answer()

@router.callback_query(EditTestStates.delete_confirm, F.data == "cancel_preview")
async def edit_tests_delete_cancel(callback: CallbackQuery, state: FSMContext, db_session):
    await state.set_state(EditTestStates.question)
    data = await state.get_data()
    question_text = await generate_current_question_text(db_session, data["test_key"], data["question_idx"])
    await callback.message.delete()
    await callback.message.answer(
        f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞**\n\n{question_text}\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=await create_test_field_selection_kb()
    )
    await callback.answer()

@router.message(EditTestStates.field, F.photo)
async def edit_tests_photo(message: Message, state: FSMContext, db_session):
    data = await state.get_data()
    if data["field"] != "photo":
        await message.answer(
            "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    try:
        photo_file = await message.bot.download(message.photo[-1])
        photo_path = f"./img/test_{int(time.time())}.jpg"
        os.makedirs(os.path.dirname(photo_path), exist_ok=True)
        with open(photo_path, "wb") as f:
            f.write(photo_file.getvalue())
        await state.update_data(new_value=photo_path)
        await state.set_state(EditTestStates.preview)
        preview_text = await generate_preview_text(db_session, data, photo_path)
        await message.answer(
            f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞**\n\n{preview_text}",
            reply_markup=await create_preview_kb()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )

@router.message(EditTestStates.field, F.text.lower() == "–Ω–µ—Ç")
async def edit_tests_no_photo(message: Message, state: FSMContext, db_session):
    data = await state.get_data()
    if data["field"] != "photo":
        await message.answer(
            "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
    await state.set_state(EditTestStates.question)
    question_text = await generate_current_question_text(db_session, data["test_key"], data["question_idx"])
    await message.answer(
        f"‚úÖ **–§–æ—Ç–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!**\n\n{question_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await create_question_selection_kb(db_session, data["test_key"])
    )

@router.message(EditTestStates.field)
async def edit_tests_field_value(message: Message, state: FSMContext, db_session):
    data = await state.get_data()
    field = data["field"]
    value = message.text
    
    if field == "question" and not is_valid_text(value):
        await message.answer(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    
    if field == "options" and not is_valid_options(value):
        await message.answer(
            "‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–∞–∂–¥—ã–π –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    
    if field == "correct":
        options = (await get_test_questions_by_lesson(db_session, data["test_key"].replace("test", "lesson")))[data["question_idx"]]
        options_count = 2 if not options.option_3 else 3
        if not is_valid_correct(value, options_count):
            await message.answer(
                f"‚ö†Ô∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {options_count}.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=await create_cancel_kb()
            )
            return
    
    await state.update_data(new_value=value)
    await state.set_state(EditTestStates.preview)
    preview_text = await generate_preview_text(db_session, data, value)
    await message.answer(
        f"üëÄ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞**\n\n{preview_text}",
        reply_markup=await create_preview_kb()
    )

@router.callback_query(EditTestStates.preview, F.data == "confirm")
async def edit_tests_confirm(callback: CallbackQuery, state: FSMContext, db_session):
    data = await state.get_data()
    lesson_key = data["test_key"].replace("test", "lesson")
    questions = await get_test_questions_by_lesson(db_session, lesson_key)
    if data["question_idx"] >= len(questions):
        await callback.message.edit_text(
            "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
        return
    question = questions[data["question_idx"]]
    try:
        await update_test_question(db_session, question, data["field"], data["new_value"])
        await state.set_state(EditTestStates.question)
        question_text = await generate_current_question_text(db_session, data["test_key"], data["question_idx"])
        await callback.message.delete()
        await callback.message.answer(
            f"‚úÖ **–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω!**\n\n{question_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await create_question_selection_kb(db_session, data["test_key"])
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
    await callback.answer()

@router.callback_query(EditTestStates.preview, F.data == "cancel_preview")
async def edit_tests_cancel_preview(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditTestStates.field)
    data = await state.get_data()
    field = data["field"]
    if field == "photo":
        await callback.message.delete()
        await callback.message.answer(
            "üñº **–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ**\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):",
            reply_markup=await create_cancel_kb()
        )
    else:
        field_names = {"question": "–í–æ–ø—Ä–æ—Å", "options": "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞", "correct": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"}
        await callback.message.delete()
        await callback.message.answer(
            f"‚ú¶ **{field_names[field]}**\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=await create_cancel_kb()
        )
    await callback.answer()

@router.callback_query(F.data == "add_module")
async def add_module_start(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(AddModuleState.name)
    await callback.message.delete()
    await callback.message.answer(
        "üìö **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è**\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'fourth', —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=await create_cancel_kb()
    )
    await callback.answer()

@router.message(AddModuleState.name)
async def add_module_name(message: Message, state: FSMContext, db_session):
    name = message.text.lower()
    if not re.match(r"^[a-zA-Z0-9_]{1,20}$", name):
        await message.answer(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    if await get_module_by_code(db_session, name):
        await message.answer(
            "‚ö†Ô∏è –ú–æ–¥—É–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(name=name)
    await state.set_state(AddModuleState.text)
    await message.answer(
        "üìù **–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è**\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=await create_cancel_kb()
    )

@router.message(AddModuleState.text)
async def add_module_text(message: Message, state: FSMContext):
    text = message.text
    if not is_valid_text(text):
        await message.answer(
            "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        return
    await state.update_data(text=text)
    await state.set_state(AddModuleState.photo)
    await message.answer(
        "üñº **–§–æ—Ç–æ –º–æ–¥—É–ª—è**\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
        reply_markup=await create_cancel_kb()
    )

@router.message(AddModuleState.photo, F.photo)
async def add_module_photo(message: Message, state: FSMContext, db_session):
    try:
        photo_file = await message.bot.download(message.photo[-1])
        photo_path = f"./img/module_{int(time.time())}.jpg"
        os.makedirs(os.path.dirname(photo_path), exist_ok=True)
        with open(photo_path, "wb") as f:
            f.write(photo_file.getvalue())
        data = await state.get_data()
        await create_module(db_session, data["name"], data["text"], photo_path)
        await state.clear()
        await message.answer(
            f"‚úÖ **–ú–æ–¥—É–ª—å {data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!**\n"
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=await create_admin_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )

@router.message(AddModuleState.photo)
async def add_module_photo_invalid(message: Message, state: FSMContext):
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å —Ñ–æ—Ç–æ.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=await create_cancel_kb()
    )

@router.callback_query(F.data == "delete_module")
async def delete_module_start(callback: CallbackQuery, state: FSMContext, db_session):
    if not await is_admin(callback.from_user.id, db_session):
        await callback.message.edit_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    modules = await get_all_modules(db_session)
    if not modules:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–æ–¥—É–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å'.",
            reply_markup=await create_admin_menu()
        )
        return
    await state.set_state(DeleteModuleState.module)
    await callback.message.delete()
    await callback.message.answer(
        "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
        reply_markup=await create_module_selection_kb_dynamic(db_session)
    )
    await callback.answer()

@router.callback_query(DeleteModuleState.module, F.data.not_in(["cancel", "exit_admin"]))
async def delete_module_select(callback: CallbackQuery, state: FSMContext, db_session):
    module = callback.data
    module_obj = await get_module_by_code(db_session, module)
    if not module_obj:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()
        )
        await state.clear()
        return
    await state.update_data(module=module)
    await state.set_state(DeleteModuleState.confirm)
    await callback.message.delete()
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delete_module")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(2)
    await callback.message.answer(
        f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å {module}?\n"
        "–≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —É—Ä–æ–∫–∏ –∏ —Ç–µ—Å—Ç—ã –º–æ–¥—É–ª—è.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(DeleteModuleState.confirm, F.data == "confirm_delete_module")
async def delete_module_confirm(callback: CallbackQuery, state: FSMContext, db_session):
    data = await state.get_data()
    module = data["module"]
    try:
        await delete_module(db_session, module)
        await sync_progress_with_content(db_session)
        await state.clear()
        await callback.message.delete()
        await callback.message.answer(
            f"‚úÖ **–ú–æ–¥—É–ª—å {module} —É–¥–∞–ª—ë–Ω!**\n"
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=await create_admin_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await create_admin_menu()
        )
        await state.clear()
    await callback.answer()

@router.callback_query(DeleteModuleState.confirm, F.data == "cancel")
async def delete_module_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "‚úÖ **–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n"
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=await create_admin_menu()
    )
    await callback.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_register
@router.message(Command("admin_register"))
async def admin_register_start(message: Message, state: FSMContext, db_session):
    user_id = message.from_user.id
    logging.info(f"Starting admin registration for user_id: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await get_user_by_id(db_session, user_id)
    if not user:
        logging.info("User not found, creating new user with default values")
        user = await create_user(
            db_session, user_id, "", "", message.from_user.username or ""
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    if user.is_admin:
        await message.answer("‚ÑπÔ∏è –¢—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
    await state.set_state(AdminRegistrationState.code)
    await message.answer(
        "üîí **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:",
        reply_markup=await create_cancel_kb()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
@router.message(AdminRegistrationState.code, F.text)
async def admin_register_code(message: Message, state: FSMContext, db_session):
    code = message.text.strip()
    user_id = message.from_user.id
    logging.info(f"Received admin registration code from user_id {user_id}: {code}")

    if code != ADMIN_SECRET_CODE:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
            reply_markup=await create_cancel_kb()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∫–æ–¥–µ
        )
        return

    # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å is_admin
    try:
        user = await get_user_by_id(db_session, user_id)
        if user:
            user.is_admin = True
            await db_session.commit()
            await state.clear()
            await message.answer(
                "‚úÖ **–¢—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!**\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        else:
            raise ValueError("User not found during admin registration")
    except Exception as e:
        logging.error(f"Error during admin registration for user_id {user_id}: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
@router.message(AdminRegistrationState.code)
async def admin_register_code_invalid(message: Message):
    logging.warning(f"Invalid input for admin registration code: {message.content_type}")
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–¥–æ–º.\n"
        "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
        reply_markup=await create_cancel_kb()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.callback_query(AdminRegistrationState.code, F.data == "cancel")
async def cancel_admin_registration(callback: CallbackQuery, state: FSMContext):
    logging.info(f"User {callback.from_user.id} canceled admin registration")
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**"
    )
    await callback.answer()