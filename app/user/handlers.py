from ast import parse
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
# from networkx import parse_adjlist
from app.database.models import Lesson
from app.user.states import RegistrationState, TestState
from app.user.keyboards import create_main_menu_dynamic, create_module_kb, create_lesson_kb, create_test_kb, create_retry_test_kb, create_update_confirmation_kb
from app.database.requests import get_all_modules, get_module_by_code, get_lesson_by_code, get_test_questions_by_lesson, get_user_by_id, create_user, get_user_progress, get_user_test_scores, mark_lesson_completed, save_test_score, sync_progress_with_content, update_user
import os
import logging
from sqlalchemy import select

router = Router()

def create_progress_bar(current, total):
    bar_length = 10
    filled = int(bar_length * current / total)
    empty = bar_length - filled
    return f"[{('üü©' * filled) + ('‚¨ú' * empty)}] {current}/{total}"

@router.message(Command("start"))
async def start_handler(message: Message, db_session):
    try:
        user_id = message.from_user.id
        logging.info(f"Handling /start for user_id: {user_id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        user = await get_user_by_id(db_session, user_id)
        if not user:
            logging.info(f"User {user_id} not found, prompting to register")
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–∏–π –±–æ—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!\n\n"
                "üìù –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî /register\n"
                "üìö –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –æ—Ç–∫—Ä–æ—é—Ç—Å—è –æ–±—É—á–∞—é—â–∏–µ –º–æ–¥—É–ª–∏ ‚Äî /modules\n"
                "‚ÑπÔ∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –∏–ª–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É üí¨\n\n"
                "üöÄ –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏!"
            )
            return

        # –ï—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        welcome_text = (
            "üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!*\n\n"
            "üìö –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –æ–±—É—á–∞—é—â–∏–µ –º–æ–¥—É–ª–∏ ‚Äî /modules\n"
            "‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /help –∏–ª–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üí¨\n\n"
            "–ñ–µ–ª–∞—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è! üöÄ"
        )
        keyboard = await create_main_menu_dynamic(db_session)
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

@router.message(Command("account"))
async def account_handler(message: Message, db_session):
    try:
        user_id = message.from_user.id
        logging.info(f"Handling /account for user_id: {user_id}")

        # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info("Step 1: Fetching user from database")
        user = await get_user_by_id(db_session, user_id)
        if not user:
            logging.info(f"User {user_id} not found, prompting to register")
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /register, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.",
                parse_mode="Markdown"
            )
            return

        # –®–∞–≥ 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        logging.info("Step 2: Syncing progress with content")
        await sync_progress_with_content(db_session)

        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info("Step 3: Fetching user progress")
        progress = await get_user_progress(db_session, user_id)
        completed_lessons = {p.lesson_code for p in progress}
        completed_count = len(completed_lessons)

        # –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
        logging.info("Step 4: Fetching all lessons")
        lessons = (await db_session.execute(select(Lesson))).scalars().all()
        total_lessons = len(lessons)

        # –®–∞–≥ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        logging.info("Step 5: Fetching user test scores")
        test_scores = await get_user_test_scores(db_session, user_id)
        score_text = "\n".join([f"‚û§ {ts.test_code}: {ts.score}/{ts.total}" for ts in test_scores]) or "‚Äî –¢–µ—Å—Ç—ã –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"

        # –®–∞–≥ 6: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        logging.info("Step 6: Creating progress bar")
        if total_lessons == 0:
            progress_bar = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤."
        else:
            progress_bar = create_progress_bar(completed_count, total_lessons)

        # –®–∞–≥ 7: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logging.info("Step 7: Preparing user display name")
        display_name = f"{user.first_name} {user.last_name}".strip()
        if not display_name:
            display_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–π /register)"

        # –®–∞–≥ 8: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        logging.info("Step 8: Sending response to user")
        await message.answer(
            "üìä *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n"
            f"–ò–º—è: {display_name}\n"
            f"ID: `{user_id}`\n\n"
            "‚ú¶ **–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è**\n"
            f"–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {completed_count}/{total_lessons}\n"
            f"{progress_bar}\n\n"
            "‚ú¶ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤**\n"
            f"{score_text}",
            parse_mode="Markdown"
        )

    except Exception as e:
        logging.error(f"Error in /account at user_id {user_id}: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

        
@router.message(Command("about"))
async def about_handler(message: Message):
    await message.answer(
        "‚ÑπÔ∏è **–û –Ω–∞—Å**\n"
        "–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞, —Å–æ–∑–¥–∞—é—â–∞—è —É–¥–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n"
        "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º!\n\n"
        "‚úâÔ∏è –°–≤—è–∑—å: @SupportBot",
        parse_mode="Markdown"
    )

@router.message(Command("contacts"))
async def contacts_handler(message: Message):
    await message.answer(
        "üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**\n"
        "‚ú¶ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @SupportBot\n"
        "‚ú¶ Email: support@learningbot.com\n"
        "‚ú¶ Telegram-–∫–∞–Ω–∞–ª: @LearningHub",
        parse_mode="Mardown"
    )

@router.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "‚ÑπÔ∏è **–ü–æ–º–æ—â—å**\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚ú¶ /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å\n"
        "‚ú¶ /account ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚ú¶ /about ‚Äî —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å\n"
        "‚ú¶ /contacts ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏\n\n"
        "–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø—Ä–æ—Ö–æ–¥–∏ —É—Ä–æ–∫–∏ —Å —Ç–µ—Å—Ç–∞–º–∏. –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏! üöÄ\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–∏—à–∏ @SupportBot.",
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("show_module_"))
async def show_module(callback: CallbackQuery, db_session):
    try:
        module_name = callback.data.split("_")[2]
        module = await get_module_by_code(db_session, module_name)
        if not module:
            await callback.message.edit_text("‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        photo = FSInputFile(os.path.join(os.getcwd(), module.photo))
        await callback.message.delete()
        await callback.message.answer_photo(
            photo,
            caption=(
                f"üìò *{module_name.capitalize()} –º–æ–¥—É–ª—å*\n"
                f"{module.text}\n\n"
                "–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:"
                
            ),
            parse_mode="Markdown",
            reply_markup=await create_module_kb(db_session, module_name)
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_module: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è!")

@router.callback_query(F.data.regexp(r"^.+\_lesson-\d+$"))
async def process_lesson(callback: CallbackQuery, state: FSMContext, db_session):
    try:
        lesson_key = callback.data
        module_prefix = lesson_key.split("_")[0]
        lesson_num = int(lesson_key.split("-")[1])
        
        lesson = await get_lesson_by_code(db_session, lesson_key)
        if not lesson:
            await callback.message.edit_text("‚ö†Ô∏è –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        photo = FSInputFile(os.path.join(os.getcwd(), lesson.photo))
        await callback.message.delete()
        await callback.message.answer_photo(
            photo,
            caption=(
                f"üìö *–£—Ä–æ–∫ {lesson_num}*\n"
                f"{lesson.text}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            ),
            parse_mode="Markdown",
            reply_markup=await create_lesson_kb(lesson.video_link, lesson.notes_link, module_prefix, lesson_num)
        )
        await state.clear()
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_lesson: {e}")
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("module_menu_"))
async def back_to_module_menu(callback: CallbackQuery, state: FSMContext, db_session):
    try:
        module_prefix = callback.data.split("_")[2]
        module = await get_module_by_code(db_session, module_prefix)
        if not module:
            await callback.message.edit_text("‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        photo = FSInputFile(os.path.join(os.getcwd(), module.photo))
        await callback.message.delete()
        await callback.message.answer_photo(
            photo,
            caption=(
                f"üìò **{module_prefix.capitalize()} –º–æ–¥—É–ª—å**\n"
                f"{module.text}\n\n"
                "–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:",
                
            ),
            
            reply_markup=await create_module_kb(db_session, module_prefix)
        )
        await state.clear()
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_module_menu: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–æ–¥—É–ª—é!")

@router.callback_query(F.data.regexp(r"^.+\_test-\d+$"))
async def start_test(callback: CallbackQuery, state: FSMContext, db_session):
    try:
        test_key = callback.data
        module_prefix = test_key.split("_")[0]
        lesson_num = int(test_key.split("-")[1])
        lesson_key = f"{module_prefix}_lesson-{lesson_num}"
        
        questions = await get_test_questions_by_lesson(db_session, lesson_key)
        if not questions:
            await callback.message.edit_text("‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–∞.")
            return
        await state.set_state(TestState.testing)
        await state.update_data(
            module_prefix=module_prefix,
            lesson_num=lesson_num,
            test_key=test_key,
            question_idx=0,
            correct_answers=0
        )
        question_data = questions[0]
        photo = FSInputFile(os.path.join(os.getcwd(), question_data.photo))
        progress_bar = create_progress_bar(1, len(questions))
        await callback.message.delete()
        await callback.message.answer_photo(
            photo,
            caption=(
                f"üìù *–¢–µ—Å—Ç –∫ —É—Ä–æ–∫—É {lesson_num}*\n"
                f"{question_data.question_text}\n\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
            ),
            parse_mode="Markdown",
            reply_markup=await create_test_kb(db_session, module_prefix, lesson_num, 0)
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_test: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞!")

@router.callback_query(TestState.testing, F.data.contains("_answer-"))
async def process_test_answer(callback: CallbackQuery, state: FSMContext, db_session):
    try:
        data = await state.get_data()
        module_prefix = data["module_prefix"]
        lesson_num = data["lesson_num"]
        test_key = data["test_key"]
        question_idx = data["question_idx"]
        correct_answers = data["correct_answers"]
        
        answer_num = int(callback.data.split("-")[-1])
        questions = await get_test_questions_by_lesson(db_session, f"{module_prefix}_lesson-{lesson_num}")
        question_data = questions[question_idx]
        
        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if answer_num == question_data.correct_option else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        correct_answers += 1 if answer_num == question_data.correct_option else 0
        
        question_idx += 1
        await callback.message.delete()
        if question_idx < len(questions):
            next_question = questions[question_idx]
            photo = FSInputFile(os.path.join(os.getcwd(), next_question.photo))
            progress_bar = create_progress_bar(question_idx + 1, len(questions))
            await state.update_data(question_idx=question_idx, correct_answers=correct_answers)
            await callback.message.answer_photo(
                photo,
                caption=(
                    f"{response}\n\n"
                    f"üìù **–í–æ–ø—Ä–æ—Å {question_idx + 1}**\n"
                    f"{next_question.question_text}\n\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
                ),
                parse_mode="Markdown",
                reply_markup=await create_test_kb(db_session, module_prefix, lesson_num, question_idx)
            )
        else:
            lesson_key = f"{module_prefix}_lesson-{lesson_num}"
            lesson = await get_lesson_by_code(db_session, lesson_key)
            photo = FSInputFile(os.path.join(os.getcwd(), lesson.photo))
            user_id = callback.from_user.id
            
            await sync_progress_with_content(db_session)
            user = await get_user_by_id(db_session, user_id)
            if not user:
                user = await create_user(
                    db_session, user_id, callback.from_user.first_name,
                    callback.from_user.last_name or "", callback.from_user.username or ""
                )

            await save_test_score(db_session, user_id, test_key, correct_answers, len(questions))
            
            if correct_answers == len(questions):
                progress = await get_user_progress(db_session, user_id)
                if lesson_key not in {p.lesson_code for p in progress}:
                    await mark_lesson_completed(db_session, user_id, lesson_key)
                caption = (
                    f"{response}\n\n"
                    f"üéâ **–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!**\n"
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers}/{len(questions)}\n"
                    f"–£—Ä–æ–∫ {lesson_num} –ø—Ä–æ–π–¥–µ–Ω!"
                )
                
                reply_markup = await create_lesson_kb(lesson.video_link, lesson.notes_link, module_prefix, lesson_num,parse_mode="Markdown")
            else:
                caption = (
                    f"{response}\n\n"
                    f"üìù **–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω**\n"
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers}/{len(questions)}\n"
                    "–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                    
                )
                
                reply_markup = await create_retry_test_kb(module_prefix, lesson_num,parse_mode="Markdown")
            
            await state.clear()
            await callback.message.answer_photo(
                photo,
                caption=caption,
                reply_markup=reply_markup
            )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_test_answer: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞!")

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext, db_session):
    try:
        await state.clear()
        modules = await get_all_modules(db_session)
        welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n"
        for module in modules:
            welcome_text += f"‚Äî {module.code.capitalize()} –º–æ–¥—É–ª—å\n"
        keyboard = await create_main_menu_dynamic(db_session)
        await callback.message.delete()
        await callback.message.answer(welcome_text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_main: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é!")

# @router.message()
# async def unknown_command(message: Message):
#     await message.answer(
#         "‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n"
#         "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é!"
#     )



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
def is_valid_name(name: str) -> bool:
    return bool(name and 1 <= len(name.strip()) <= 50 and name.isalpha())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@router.message(Command("register"))
async def register_start(message: Message, state: FSMContext, db_session):
    user_id = message.from_user.id
    logging.info(f"Starting registration for user_id: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await get_user_by_id(db_session, user_id)
    if not user:
        logging.info("User not found, creating new user with default values")
        user = await create_user(
            db_session, user_id, "", "", message.from_user.username or ""
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    display_name = f"{user.first_name} {user.last_name}".strip()
    if display_name:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        logging.info(f"User {user_id} already registered with name: {display_name}")
        await message.answer(
            "üìù *–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω*\n"
            f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"*–ò–º—è:* {user.first_name}\n"
            f"*–§–∞–º–∏–ª–∏—è:* {user.last_name}\n\n"
            "–•–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?",
            parse_mode="Markdown",
            reply_markup=await create_update_confirmation_kb()
        )
        return

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.set_state(RegistrationState.first_name)
    await message.answer(
        "üìù **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
@router.callback_query(F.data == "update_profile")
async def confirm_update_profile(callback: CallbackQuery, state: FSMContext):
    logging.info(f"User {callback.from_user.id} chose to update profile")
    await state.set_state(RegistrationState.first_name)
    await callback.message.delete()
    await callback.message.answer(
        "üìù *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö*\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –Ω–æ–≤–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.callback_query(F.data == "cancel_update")
async def cancel_update_profile(callback: CallbackQuery, state: FSMContext):
    logging.info(f"User {callback.from_user.id} canceled profile update")
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /account.",
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RegistrationState.first_name, F.text)
async def register_first_name(message: Message, state: FSMContext):
    first_name = message.text.strip()
    logging.info(f"Received first_name: {first_name}")

    if not is_valid_name(first_name):
        await message.answer(
            "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
            parse_mode="Markdown"
        )
        
        return

    await state.update_data(first_name=first_name)
    await state.set_state(RegistrationState.last_name)
    await message.answer(
        "üìù **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RegistrationState.first_name)
async def register_first_name_invalid(message: Message):
    logging.warning(f"Invalid input for first_name: {message.content_type}")
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
@router.message(RegistrationState.last_name, F.text)
async def register_last_name(message: Message, state: FSMContext, db_session):
    last_name = message.text.strip()
    logging.info(f"Received last_name: {last_name}")

    if not is_valid_name(last_name):
        await message.answer(
            "‚ö†Ô∏è –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
            parse_mode="Markdown"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    first_name = data["first_name"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user_id = message.from_user.id
    try:
        user = await get_user_by_id(db_session, user_id)
        if user:
            await update_user(db_session, user, first_name, last_name)
            await state.clear()
            await message.answer(
                "‚úÖ *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n"
                f"–ò–º—è: {first_name}\n"
                f"–§–∞–º–∏–ª–∏—è: {last_name}\n\n"
                "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /account.",
                parse_mode='Markdown'
            )
        else:
            raise ValueError("User not found after registration start")
    except Exception as e:
        logging.error(f"Error during registration for user_id {user_id}: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
@router.message(RegistrationState.last_name)
async def register_last_name_invalid(message: Message):
    logging.warning(f"Invalid input for last_name: {message.content_type}")
    await message.answer(
        "‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–º–∏–ª–∏–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:"
    )